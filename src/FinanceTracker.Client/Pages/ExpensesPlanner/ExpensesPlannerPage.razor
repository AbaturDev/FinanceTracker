@page "/expenses-planners"

@using FinanceTracker.Client.Dtos.Common
@using FinanceTracker.Client.Dtos.ExpensesPlanners
@using FinanceTracker.Client.Pages.ExpensesPlanner.Components
@using Microsoft.AspNetCore.Components.Authorization
@inject IExpensesPlannerService ExpensesPlannerService
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<AuthorizeView>
    <Authorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mr-3" OnClick="OpenAddExpensesPlannerDialog">
            Add expenses planner
        </MudButton>
        <MudText Typo="Typo.h4" Align="Align.Center"> Expenses Planners</MudText>
        <MudTable @ref="_table" Items="_expensesPlanners.Items" ServerData="LoadIncomes" Class="mt-5" Style="position: relative">
            <HeaderContent>
                <MudTh Style="width: 15%;"> Name </MudTh>
                <MudTh Style="width: 15%;"> Budget </MudTh>
                <MudTh Style="width: 15%;"> Spent Amount </MudTh>
                <MudTh Style="width: 15%;"> Category </MudTh>
                <MudTh Style="width: 10%;"> Id </MudTh>
                <MudTh Style="width: 10%;"> Currency </MudTh>
                <MudTh Class="text-end" Style="width: 5%;">Actions</MudTh>
            </HeaderContent>
            <RowTemplate Context="expensesPlanner">
                <MudTd DataLabel="Name">@expensesPlanner.Name</MudTd>
                <MudTd DataLabel="Budget">@expensesPlanner.Budget @expensesPlanner.CurrencyCode</MudTd>
                <MudTd DataLabel="Spent Amount">@expensesPlanner.SpentAmount @expensesPlanner.CurrencyCode</MudTd>
                <MudTd DataLabel="Category">@expensesPlanner.Category?.Name</MudTd>
                <MudTd DataLabel="Id">@expensesPlanner.Id</MudTd>
                <MudTd DataLabel="Currency">@expensesPlanner.CurrencyCode</MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter">
                        <MudMenuItem OnClick="@(async () => await OpenAddTransactionDialog(expensesPlanner.Id))"> Add transaction </MudMenuItem>
                        <MudDivider/>
                        <MudMenuItem OnClick="@(()=> OpenTransactionsPage(expensesPlanner.Id))"> Transactions </MudMenuItem>
                        <MudDivider/>
                        <MudMenuItem OnClick="@(async () => await OpenEditExpensesPlannerDialog(expensesPlanner.Id))"> Edit </MudMenuItem>
                        <MudDivider/>
                        <MudMenuItem OnClick="@(async () => await OnButtonClicked(expensesPlanner.Id, new CancellationToken()))"> Delete </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new [] { 10, 25, 50, 100 }" Class="position-relative"/>
            </PagerContent>
        </MudTable>
    </Authorized>

    <NotAuthorized>
        <RedirectNotAuthorizedUser />
    </NotAuthorized>

</AuthorizeView>

@code {
    private PaginatedResponse<ExpensesPlannerDto> _expensesPlanners = new();
    private MudTable<ExpensesPlannerDto> _table;

    private async Task<TableData<ExpensesPlannerDto>> LoadIncomes(TableState state, CancellationToken ct)
    {
        var pageNumber = state.Page + 1;
        var pageSize = state.PageSize;
        var response = await ExpensesPlannerService.GetExpensesPlannersAsync(pageSize, pageNumber, ct);

        return new TableData<ExpensesPlannerDto>
        {
            Items = response?.Items ?? new List<ExpensesPlannerDto>(),
            TotalItems = response?.TotalItemsCount ?? 0
        };
    }
    
    private async Task OnButtonClicked(int id, CancellationToken ct)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning", 
            "Are you sure you want to delete this expenses planner?", 
            yesText: "Delete!", cancelText: "Cancel");

        if (result == true)
        {
            var response = await ExpensesPlannerService.DeleteExpensesPlannerAsync(id, ct);

            if (response.IsSuccess)
            {
                Snackbar.Add($"Deleted expenses planner with id: {id}", Severity.Success);
                await _table.ReloadServerData();
            }
            else
            {
                Snackbar.Add(response.ErrorMessage, Severity.Error);
            }
        }
    }

    private async Task OpenEditExpensesPlannerDialog(int id)
    {
        var parameters = new DialogParameters
        {
            { "Id", id }
        };
        
        var dialog = await DialogService.ShowAsync(typeof(UpdateExpensesPlannerComponent),$"Edit Expenses Planner {id}", parameters);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OpenAddExpensesPlannerDialog()
    {
        var dialog = await DialogService.ShowAsync(typeof(AddExpensesPlannerComponent),"Add Expenses Planner");
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OpenAddTransactionDialog(int id)
    {
        var parameters = new DialogParameters
        {
            { "Id", id }
        };
        
        var dialog = await DialogService.ShowAsync(typeof(AddExpensesPlannerTransactionComponent),$"Add Transaction for Expenses Planner {id}", parameters);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private void OpenTransactionsPage(int id)
    {
        var url = $"/expenses-planners/{id}/transactions";
        Navigation.NavigateTo(url);
    }
}

@page "/incomes"
@using FinanceTracker.Client.Dtos.Common
@using FinanceTracker.Client.Dtos.Incomes
@using FinanceTracker.Client.Pages.Income.Components
@using Microsoft.AspNetCore.Components.Authorization
@inject IIncomeService IncomeService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<AuthorizeView>
    <Authorized>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mr-3" OnClick="OpenIncomeDialog">
            Add Income
        </MudButton>
        <MudText Typo="Typo.h4" Align="Align.Center">Incomes</MudText>
        <MudTable @ref="_table" Items="_incomes.Items" ServerData="LoadIncomes" Class="mt-5" Style="position: relative">
            <HeaderContent>
                <MudTh Style="width: 19%;">Name</MudTh>
                <MudTh Style="width: 19%;">Amount of money</MudTh>
                <MudTh Style="width: 19%;">Is active</MudTh>
                <MudTh Style="width: 19%;">Id</MudTh>
                <MudTh Style="width: 19%;">Currency</MudTh>
                <MudTh Class="text-end" Style="width: 5%;">Actions</MudTh>
            </HeaderContent>
            <RowTemplate Context="income">
                <MudTd DataLabel="Name">@income.Name</MudTd>
                <MudTd DataLabel="Amount of money">@income.Amount @income.CurrencyCode</MudTd>
                <MudTd DataLabel="Is active">@income.IsActive</MudTd>
                <MudTd DataLabel="Id">@income.Id</MudTd>
                <MudTd DataLabel="Currency">@income.CurrencyCode</MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter">
                        <MudMenuItem OnClick="@(async () => await OpenEditIncomeDialog(income.Id))"> Edit </MudMenuItem>
                        <MudDivider/>
                        <MudMenuItem OnClick="@(async () => await OnButtonClicked(income.Id, new CancellationToken()))"> Delete </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new [] { 10, 25, 50, 100 }" Class="position-relative"/>
            </PagerContent>
        </MudTable>
    </Authorized>

    <NotAuthorized>
        <RedirectNotAuthorizedUser />
    </NotAuthorized>

</AuthorizeView>

@code {
    private PaginatedResponse<IncomeDto> _incomes = new();
    private MudTable<IncomeDto> _table;

    private async Task<TableData<IncomeDto>> LoadIncomes(TableState state, CancellationToken ct)
    {
        var pageNumber = state.Page + 1;
        var pageSize = state.PageSize;
        var response = await IncomeService.GetIncomesAsync(pageNumber, pageSize, ct);

        return new TableData<IncomeDto>
        {
            Items = response?.Items ?? new List<IncomeDto>(),
            TotalItems = response?.TotalItemsCount ?? 0
        };
    }
    
    private async Task OnButtonClicked(int id, CancellationToken ct)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning", 
            "Are you sure you want to delete this income?", 
            yesText: "Delete!", cancelText: "Cancel");

        if (result == true)
        {
            var response = await IncomeService.DeleteIncomeAsync(id, ct);

            if (response.IsSuccess)
            {
                Snackbar.Add($"Deleted income with id: {id}", Severity.Success);
                await _table.ReloadServerData();
            }
            else
            {
                Snackbar.Add(response.ErrorMessage, Severity.Error);
            }
        }
    }

    private async Task OpenEditIncomeDialog(int id)
    {
        var parameters = new DialogParameters
        {
            { "Id", id }
        };
        
        var dialog = await DialogService.ShowAsync(typeof(UpdateIncomeComponent),$"Edit Income {id}", parameters);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OpenIncomeDialog()
    {
        var dialog = await DialogService.ShowAsync(typeof(AddIncomeComponent),"Add Income");
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await _table.ReloadServerData();
        }
    }
}
